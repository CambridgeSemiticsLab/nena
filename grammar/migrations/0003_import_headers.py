# -*- coding: utf-8 -*-
# Generated by Django 1.11.12 on 2018-04-15 06:20
from __future__ import unicode_literals

from django.apps import apps as global_apps
from django.db import migrations
from django.db.models import Q

from common.utils import fixup, enum

# removed dependency in 75224e - this migration will not run without it being reinstated
# from legacy.models import Headers
from grammar.models import Feature

para = {0: '-', 1:'|'}

def get_parent(obj):
    '''get the parent node of a Headers object'''
    headings = [i for i in [obj.level0_seq, obj.level1_seq, obj.level2_seq, obj.level3_seq, obj.level4_seq, obj.level5_seq]]
    headings[obj.header_level] = 0
    try:
        return Headers.objects.get(Q(level0_seq=headings[0]), Q(level1_seq=headings[1]), Q(level2_seq=headings[2]), Q(level3_seq=headings[3]), Q(level4_seq=headings[4]), Q(level5_seq=headings[5]))
    except:
        return None


def feature_forward(global_apps, schema_editor):

    get = lambda node_id: Feature.objects.get(pk=node_id)
    print('') # dummy print to make the first root appear on a new line

    for id in [e.pk for e in Headers.objects.all().order_by('level0_seq','level1_seq','level2_seq','level3_seq','level4_seq','level5_seq')]:
        try:
            # load object and its headings
            obj = Headers.objects.get(pk=id)
            headings = [i for i in [obj.level0_seq, obj.level1_seq, obj.level2_seq, obj.level3_seq, obj.level4_seq, obj.level5_seq] if i > 0]
            parent = get_parent(obj)
            if parent is None:
                # we're at a root node, add it and reset tree
                #print(f'adding root {obj.header} with id {obj.pk}')
                node = Feature.add_root(id=obj.header_id, name=fixup(obj.header), heading=headings[0], group=bool(obj.group_header))
            else:
                node = get(parent.pk).add_child(id=obj.header_id, name=fixup(obj.header), heading=headings[-1], group=bool(obj.group_header))
        except Headers.DoesNotExist:
            print('object does not exist', id)

def feature_reverse(global_apps, schema_editor):
    try:
        Feature.objects.filter(pk__in=[e.pk for e in Headers.objects.all()]).delete()
    except Exception as e:
        print(e)
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('grammar', '0001_initial'),
        ('grammar', '0002_feature_fullheading'),
    ]

    operations = [
        migrations.RunPython(feature_forward, feature_reverse),
    ]
