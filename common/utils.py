# -*- coding: utf-8 -*-
# gENerated by Django 1.10.1 on 2016-11-29 06:25
from __future__ import unicode_literals

from ftfy import fix_text
from ftfy.fixes import unescape_html, decode_escapes

from django.contrib.auth import REDIRECT_FIELD_NAME
from django.contrib.admin.views.decorators import user_passes_test

def fixup(text):
    if text is None:
        return ''
    else:
        return fix_text(text)

def enum(text, enums):
        try:
            return enums[text]
        except KeyError:
            return ''

#def superuser_required(view_func=None, redirect_field_name=REDIRECT_FIELD_NAME,
#                   login_url='account_login_url'):
#    """
#    Decorator for views that checks that the user is logged in and is a
#    superuser, redirecting to the login page if necessary.
#    """
#    actual_decorator = user_passes_test(
#        lambda u: u.is_active and u.is_superuser,
#        login_url=login_url,
#        redirect_field_name=redirect_field_name
#    )
#    if view_func:
#        return actual_decorator(view_func)
#    return actual_decorator

def superuser_required(view_func=None, redirect_field_name=REDIRECT_FIELD_NAME,
                          login_url='admin:login'):
    """
    Decorator for views that checks that the user is logged in and is a superuser,
    redirecting to the login page if necessary.
    """
    actual_decorator = user_passes_test(
        lambda u: u.is_active and u.is_superuser,
        login_url=login_url,
        redirect_field_name=redirect_field_name
    )
    if view_func:
        return actual_decorator(view_func)
    return actual_decorator

