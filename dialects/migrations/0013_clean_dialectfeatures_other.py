# Generated by Django 2.1.7 on 2019-05-10 14:12
from django.db import migrations

from ftfy import fix_text

from dialects.models import DialectFeatureEntry

def set_absent_move_comment_to_parent(dfe):
    dfe.feature.is_absent = True
    print('  setting parent to is_absent=True')
    move_comment_and_delete(dfe)

def move_comment_and_delete(dfe):
    comment = dfe.feature.comment or ''
    if dfe.comment:
        comment = comment + ' ' + dfe.comment
    dfe.feature.comment = comment
    print('  moving comment to parent')
    dfe.feature.save()
    print('  deleting blank entry')
    dfe.delete()

def add_category_move_comment_and_delete(dfe):
    category = dfe.entry.strip()
    dfe.feature.category = category
    dfe.feature.feature.add_category(category)
    print('  adding category "{}" to {}'.format(category, dfe.feature.feature_id))
    dfe.feature.save()
    dfe.feature.feature.save()
    move_comment_and_delete(dfe)

def split_example(dfe):
    examples  = dfe.entry.split('~')
    dfe.entry = examples[0].strip(' ()')
    print('  saving example "{}" {}'.format(dfe.entry, dfe.frequency))
    dfe.save()
    for example in examples[1:]:
        dfe.pk = None
        dfe.frequency = 'M' if ')' in example else 'P'
        dfe.entry = example.strip(' ()')
        print('  saving example "{}" {}'.format(dfe.entry, dfe.frequency))
        dfe.save()


cleaners = (
    ('XXX', set_absent_move_comment_to_parent),
    ('^ *$', move_comment_and_delete),
    ('^-*$', move_comment_and_delete),
    ('^ *Yes *$', add_category_move_comment_and_delete),
    ('^ *No *$', add_category_move_comment_and_delete),
    ('^ *Yes \(mostly loanwords\) *$', add_category_move_comment_and_delete),
    ('^ *No, general past base only *$', add_category_move_comment_and_delete),
    ('^ *No: General stative participle only *$', add_category_move_comment_and_delete),
    ('^ *No, restricted to loanwords *$', add_category_move_comment_and_delete),
    ('^ *None *$', add_category_move_comment_and_delete),
    ('^ *None attested\.? *$', add_category_move_comment_and_delete),
    ('^ *Penultimate *$', add_category_move_comment_and_delete),
    ('^ *Regular assimilation of L-suffix and resulting gemination of \/[rn]\/\. *$', add_category_move_comment_and_delete),
    ('~', split_example),

)

def forwards(apps, schema_editor):
    for regex, cleaning_function in cleaners:
        dfes = DialectFeatureEntry.objects.filter(entry__iregex=regex)
        print('\nLooking for '+regex)
        for dfe in dfes[0:100000]:
            print('{}) {}'.format(dfe.feature.id, dfe))
            print('  was: ' + dfe.entry[0:100] +('"'+str(dfe.comment)+'"' if dfe.comment is not None else ''))
            cleaning_function(dfe)
            print('  now: ' + dfe.entry[0:100])
    #raise Exception(1)

def backwards(apps, schema_editor):
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('dialects', '0012_clean_dialectfeatures_span'),
    ]

    operations = [
       migrations.RunPython(forwards, backwards),
    ]
